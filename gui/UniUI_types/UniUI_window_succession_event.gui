types window_succession_event_show_state {
	type window_succession_event_show_state_Inherichance = hbox {
		state = {
			name =_show
			on_start = "[GetScriptedGui('sgui_inherichance').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('dead_character',SuccessionEventWindow.GetDeadCharacter.MakeScope).End)]"
		}
	}
}

types window_succession_event_coa_title_small_crown {
	type coa_title_small_crown_vanilla = coa_title_small_crown {
		datacontext = "[GetPlayer.GetPrimaryTitle]"
		visible = "[Title.IsValid]"
		parentanchor = bottom|hcenter
	}
	type coa_title_small_crown_Inherichance = coa_title_small_crown {
		datacontext = "[SuccessionEventWindow.GetPlayerHeir.GetPrimaryTitle]"
		visible = "[Title.IsValid]"
		parentanchor = bottom|hcenter
	}
}

types window_succession_event_text {
	type window_succession_event_text_vanilla = vbox {
		margin = { 10 10 }
		
		text_multi = {
			name = "dead_description"
			size = { 384 150 }
			text = "[SuccessionEventWindow.GetDeadDesc]"
			visible = "[And(Not(SuccessionEventWindow.IsEndDateReached), Not(SuccessionEventWindow.GetDeadCharacter.IsAlive))]"
			using = Font_Size_Medium
		}
		
		text_multi = {
			name = "heir_description"
			size = { 384 120 }
			text = "[SuccessionEventWindow.GetHeirDesc]"
			using = Font_Size_Medium
			visible = "[Not(SuccessionEventWindow.IsEndDateReached)]"
			autoresize = yes
			max_width = 380
		}
		
		text_multi = {
			name = "end_date_description"
			size = { 384 120 }
			text = "SUCCESSION_EVENT_WINDOW_END_DATE_DESC"
			using = Font_Size_Medium
			visible = "[SuccessionEventWindow.IsEndDateReached]"
			autoresize = yes
			max_width = 380
		}
	}
	type window_succession_event_text_Inherichance = vbox {
		layoutpolicy_vertical = expanding
		margin = { 10 10 }

		text_multi = {
			name = "end_date_description"
			size = { 384 120 }
			text = "SSUCCESSION_EVENT_WINDOW_END_DATE_DESC"
			using = Font_Size_Medium
			visible = "[SuccessionEventWindow.IsEndDateReached]"
			# autoresize = yes
			# max_width = 400
		}

		

		text_multi = {
			name = "dead_description"
			size = { 384 150 }
			text = "[SuccessionEventWindow.GetDeadDesc]"
			visible = "[And(Not(SuccessionEventWindow.IsEndDateReached), Not(SuccessionEventWindow.GetDeadCharacter.IsAlive))]"
			using = Font_Size_Medium
			
		}

		spacer = {
			size = { 10 20 }
		}

		text_multi = {
			visible = "[And(Not(SuccessionEventWindow.IsEndDateReached),EqualTo_uint32(GetPlayer.GetID,SuccessionEventWindow.GetPlayerHeir.GetID))]"
			name = "heir_description"
			size = { 384 120 }
			text = "[SuccessionEventWindow.GetHeirDesc]"
			using = Font_Size_Medium
			# autoresize = yes
			# max_width = 400
		}

		text_multi = {
			visible = "[And(Not(SuccessionEventWindow.IsEndDateReached),Not(EqualTo_uint32(GetPlayer.GetID,SuccessionEventWindow.GetPlayerHeir.GetID)))]"
			name = "heir_description_inherichance"
			size = { 384 120 }
			text = "INHERICHANCE_HEIR_DESC"
			using = Font_Size_Medium
			# autoresize = yes
			# max_width = 400
		}
		expand = {}
	}
}

types window_succession_event_titles {
	type window_succession_event_titles_vanilla = vbox {
		name = "titles"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin = { 6 6 }
		spacing = 6

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "SUCCESSION_INHERITED_TITLES"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_bottom = 15

			#fixedgridbox = { # hbox doesn't work with datamodel_wrap
			dynamicgridbox = {
				name = "inherited"
				datamodel = "[SuccessionEventWindow.GetInheritedTitles]"
				datamodel_wrap = 11
				#addcolumn = 56
				#addrow = 56
				flipdirection = yes

				item = {
					coa_title_small_crown = {
						using = CTFA_hide_if_vanity_title
					}
				}
			}

			expand = {}
		}

		hbox = {
			visible = "[SuccessionEventWindow.HasLostTitles]"
			layoutpolicy_horizontal = expanding

			text_single = {
				text = "SUCCESSION_LOST_TITLES"
			}

			button_expand = {
				name = "show_lost_titles"
				frame = "[Select_int32( SuccessionEventWindow.ShowLostTitles, '(int32)2', '(int32)1' )]"
				onclick = "[SuccessionEventWindow.ToggleLostTitles]"
				using = tooltip_ws
			}

			expand = {}
		}

		divider = {
			visible = "[SuccessionEventWindow.HasLostTitles]"
			layoutpolicy_horizontal = expanding
		}

		vbox = {
			name = "lost_titles"
			visible = "[And( SuccessionEventWindow.ShowLostTitles, SuccessionEventWindow.HasLostTitles )]"
			layoutpolicy_horizontal = expanding
			margin_top = 5

			vbox = {
				datamodel = "[SuccessionEventWindow.GetLostTitles]"
				layoutpolicy_horizontal = expanding
				spacing = 8

				item = {
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "SUCCESSION_LOST_TITLE_SHARE"
							margin_left = 5
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 20

							portrait_head_small = {
								name = "portrait"
								datacontext = "[SuccessionEventWindowLostTitlesItem.GetHeir]"

								blockoverride "portrait_transformation"
								{
									portrait_scale = { -1 1 }
									portrait_offset = { 1 0 }
								}
							}

							hbox = {
								name = "title_member_grid"
								datamodel = "[SuccessionEventWindowLostTitlesItem.GetTitles]"
								datamodel_wrap = 10

								item = {
									coa_title_tiny_crown = {
									}
								}
							}

							expand = {}
						}
					}
				}
			}
		}

		expand = {
			layoutpolicy_vertical = expanding
		}
	}
	type window_succession_event_titles_Inherichance = vbox {
		name = "titles"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin = { 6 6 }
		spacing = 6

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "SUCCESSION_INHERITED_TITLES"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_bottom = 15

			fixedgridbox = { # hbox doesn't work with datamodel_wrap
				name = "inherited"
				datamodel = "[GetPlayer.MakeScope.Var('inherichance_titles_story').GetList('inherited_titles')]"
				datamodel_wrap = 11
				addcolumn = 56
				addrow = 56
				flipdirection = yes

				item = {
					
					coa_title_small_crown_inherichance = {}
				}
			}

			expand = {}
		}

		hbox = {
			visible = "[SuccessionEventWindow.HasLostTitles]"
			layoutpolicy_horizontal = expanding

			text_single = {
				text = "INHERICHANCE_LOST_TITLES"
			}

			button_expand = {
				name = "show_lost_titles"
				frame = "[Select_int32( SuccessionEventWindow.ShowLostTitles, '(int32)2', '(int32)1' )]"
				onclick = "[SuccessionEventWindow.ToggleLostTitles]"
				using = tooltip_ws
			}

			expand = {}
		}

		divider = {
			visible = "[SuccessionEventWindow.HasLostTitles]"
			layoutpolicy_horizontal = expanding
		}

		vbox = {
			name = "lost_titles"
			visible = "[And( SuccessionEventWindow.ShowLostTitles, SuccessionEventWindow.HasLostTitles )]"
			layoutpolicy_horizontal = expanding
			margin_top = 5

			vbox = {
				datamodel = "[GetPlayer.MakeScope.Var('inherichance_heirs_story').GetList('other_heirs')]"
				layoutpolicy_horizontal = expanding
				spacing = 8

				
				item = {
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "INHERICHANCE_LOST_TITLE_SHARE"
							margin_left = 5
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 20

							portrait_head_small = {
								name = "portrait"
								datacontext = "[Scope.GetCharacter]"

								blockoverride "portrait_transformation"
								{
									portrait_scale = { -1 1 }
									portrait_offset = { 1 0 }
								}
							}

							fixedgridbox = { # hbox doesn't work with datamodel_wrap
								name = "inherited"
								datamodel = "[Scope.Var('inherichance_titles_story').GetList('inherited_titles')]"
								datamodel_wrap = 9
								addcolumn = 56
								addrow = 56
								flipdirection = yes

								item = {
									coa_title_small_crown_inherichance = {
									}
								}
							}

							expand = {}
						}
					}
				}
			}
		}

		expand = {
			layoutpolicy_vertical = expanding
		}
	}
}

types window_succession_event_legacy_item {
	type window_succession_event_legacy_item_vanilla = vbox_legacy_item {
	}
	type window_succession_event_legacy_item_Inherichance = vbox_legacy_item {
		visible = "[Not(EqualTo_string(LegacyItem.GetEndDate.GetString,LegacyItem.GetStartDate.GetString))]"
	}
}

types window_succession_event_buttons {
	type window_succession_event_buttons_vanilla = hbox {
		spacing = 15
		button_primary = {
			name = "close_button"
			visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
			onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_reset')]"
			text = "SUCCESSION_EVENT_WINDOW_CLOSE"
			min_width = 330
		}

		button_standard = {
			name = "observer_button"
			visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
			text = "SUCCESSION_EVENT_WINDOW_OBSERVER"
			onclick = "[SuccessionEventWindow.GoToObserver]"
			default_format = "#high"
		}

		button_standard  = {
			name = "change_button"
			visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
			text = "SUCCESSION_EVENT_WINDOW_CHANGE_CHARACTER"
			onclick = "[SuccessionEventWindow.ChooseNewCharacter]"
			default_format = "#high"
		}

		button_standard  = {
			name = "menu_button"
			visible = "[Not(SuccessionEventWindow.GetPlayerHeir.IsValid)]"
			text = "[SuccessionEventWindow.GetExitName]"
			tooltip = "[SuccessionEventWindow.GetExitTooltip]"
			onclick = "[SuccessionEventWindow.GoToMenu]"
			default_format = "#high"
		}
	}
	type window_succession_event_buttons_Inherichance = hbox {
		spacing = 15
		button_primary = {
			name = "close_button"
			visible = "[SuccessionEventWindow.GetPlayerHeir.IsValid]"
			onclick = "[PdxGuiTriggerAllAnimations('ruler_transition_reset')]"
			onclick = "[GetScriptedGui('sgui_end_inherichance').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
			text = "INHERICHANCE_EVENT_WINDOW_CLOSE"
			min_width = 330
		}

		button_standard = {
			name = "observer_button"
			visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
			text = "SUCCESSION_EVENT_WINDOW_OBSERVER"
			onclick = "[SuccessionEventWindow.GoToObserver]"
			onclick = "[GetScriptedGui('sgui_end_inherichance').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
			default_format = "#high"
		}

		button_standard = {
			name = "change_button"
			visible = "[And( Not(SuccessionEventWindow.GetPlayerHeir.IsValid), SuccessionEventWindow.CanChangeCharacter)]"
			text = "SUCCESSION_EVENT_WINDOW_CHANGE_CHARACTER"
			onclick = "[SuccessionEventWindow.ChooseNewCharacter]"
			onclick = "[GetScriptedGui('sgui_end_inherichance').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
			default_format = "#high"
		}

		button_standard = {
			name = "menu_button"
			visible = "[Not(SuccessionEventWindow.GetPlayerHeir.IsValid)]"
			text = "[SuccessionEventWindow.GetExitName]"
			tooltip = "[SuccessionEventWindow.GetExitTooltip]"
			onclick = "[SuccessionEventWindow.GoToMenu]"
			onclick = "[GetScriptedGui('sgui_end_inherichance').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
			default_format = "#high"
		}
	}
}